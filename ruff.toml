# ruff.toml
# See all configuration options here: https://docs.astral.sh/ruff/configuration/

# Target the oldest supported Python version for compatibility checks.
target-version = "py310"

# Define the source directories for linting and formatting.
src = ["src", "tests", "scripts"]

[lint]
# Enforce a strict set of rules by selecting all rule categories.
# For a full list of rules, see: https://docs.astral.sh/ruff/rules/
select = [
    "A",   # flake8-builtins
    "ANN", # flake8-annotations
    "ARG", # flake8-unused-arguments
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "C90", # mccabe
    "COM", # flake8-commas
    "D",   # pydocstyle
    "DTZ", # flake8-datetimez
    "E",   # pycodestyle (error)
    "W",   # pycodestyle (warning)
    "EM",  # flake8-errmsg
    "ERA", # eradicate
    "F",   # pyflakes
    "G",   # flake8-logging-format
    "I",   # isort
    "ICN", # flake8-import-conventions
    "INP", # flake8-no-pep420
    "ISC", # flake8-implicit-str-concat
    "N",   # pep8-naming
    "PERF",# perflint
    "PGH", # pygrep-hooks
    "PIE", # flake8-pie
    "PL",  # pylint
    "PT",  # flake8-pytest-style
    "PYI", # flakes8-pyi
    "Q",   # flake8-quotes
    "RET", # flake8-return
    "RSE", # flake8-raise
    "RUF", # Ruff-specific rules
    "S",   # flake8-bandit
    "SIM", # flake8-simplify
    "T20", # flake8-print
    "TID", # flake8-tidy-imports
    "UP",  # pyupgrade
    "YTT", # flake8-2020
]

# Ignore specific rules that are either too noisy or conflict with other tools/styles.
ignore = [
    "D100",   # Missing docstring in public module
    "D104",   # Missing docstring in public package
    "D107",   # Missing docstring in `__init__`
    "ANN101", # Missing type annotation for `self` in method
    "ANN102", # Missing type annotation for `cls` in classmethod
    "ANN401", # Dynamically-typed expressions (e.g., `Any`) are disallowed
    "FIX002", # Line contains `TODO`
    "TD002",  # Missing author in `TODO`
    "TD003",  # Missing issue link in `TODO`
    "D203",   # Conflicts with black code formatter
    "D213",   # Conflicts with black code formatter
    "COM812", # Handled by the formatter
    "ISC001", # Handled by the formatter
    "PLR0913",# Too many arguments
    "PLR2004",# Magic value used in comparison
]

[lint.pydocstyle]
# Use the "google" convention for docstrings, which is common and readable.
convention = "google"

[format]
# Use a style compatible with the "black" code formatter.
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"